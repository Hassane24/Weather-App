(()=>{"use strict";async function t(t){const e=await async function(t){return fetch(t,{mode:"cors"})}(t);return e.json()}(()=>{const e=document.querySelector("#searchBar"),n=document.querySelector("#startSearch"),o=document.querySelector("#temp"),a=document.querySelector("#location"),r=document.querySelector("#date"),c=document.querySelector("#weather-icon"),u=document.querySelector("#weather-state"),s=document.querySelectorAll("[data-state]"),d=document.querySelector("#wind"),i=document.querySelector("#humidity"),g=document.querySelector("#clouds"),h=document.querySelector("#fahrenheit");function l(t){a.textContent=t.name,o.textContent=`${t.main.temp}Â°C`,u.textContent=t.weather[0].main,g.textContent=`${t.clouds.all}%`,i.textContent=`${t.main.humidity}%`,d.textContent=Math.round(3.6*t.wind.speed*100)/100+"km/h","Clear"==u.textContent&&(c.src="images/sun.svg"),"Thunderstorm"==u.textContent&&(c.src="images/lightning.svg"),"Snow"==u.textContent&&(c.src="images/snow.svg"),"Clouds"==u.textContent&&(c.src="images/cloudy.svg"),"Rain"==u.textContent&&(c.src="images/rainy.svg")}function m(t){let e="",n="",o="",a="",c="",u="";const s=new Date,d=s.getTimezoneOffset();s.setMinutes(s.getMinutes()+d+t.timezone/60),e=s.getFullYear(),o=s.getDate(),c=s.getHours(),u=s.getMinutes(),0==s.getMonth()&&(n="Jan"),1==s.getMonth()&&(n="Feb"),2==s.getMonth()&&(n="Mar"),3==s.getMonth()&&(n="Apr"),4==s.getMonth()&&(n="May"),5==s.getMonth()&&(n="June"),6==s.getMonth()&&(n="July"),7==s.getMonth()&&(n="Aug"),8==s.getMonth()&&(n="Sep"),9==s.getMonth()&&(n="Oct"),10==s.getMonth()&&(n="Nov"),11==s.getMonth()&&(n="Dec"),0==s.getDay()&&(a="Sunday"),1==s.getDay()&&(a="Monday"),2==s.getDay()&&(a="Tuesday"),3==s.getDay()&&(a="Wednesday"),4==s.getDay()&&(a="Thursday"),5==s.getDay()&&(a="Friday"),6==s.getDay()&&(a="Saturday"),r.textContent=`${c}:${u} - ${a}, ${o} ${n} ${e}`}h.addEventListener("click",(()=>{if(o.textContent)if(h.checked){let t=o.textContent;t=parseInt(t,10),t=9*t/5+32,o.textContent=Math.round(100*t)/100}else{let t=o.textContent;t=parseInt(t,10),t=5*(t-32)/9,o.textContent=Math.round(100*t)/100}})),s.forEach((e=>{e.addEventListener("click",(e=>{t(`https://api.openweathermap.org/data/2.5/weather?q=${e.target.innerText}&APPID=512dd7c72356c3b72f04ac7af77e9f8a&units=metric`).then((t=>{l(t),m(t)}))}))})),n.addEventListener("click",(()=>{t(`https://api.openweathermap.org/data/2.5/weather?q=${e.value}&APPID=512dd7c72356c3b72f04ac7af77e9f8a&units=metric`).then((t=>"400"===t.cod||"404"===t.cod?alert(t.message):(l(t),m(t),void(e.value=""))),(t=>{console.log(t)}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,